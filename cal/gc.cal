#ifndef GC_CAL
#define GC_CAL

#include "stdlib.cal"

import CaLang_GcMapRoot;
import CaLang_prepareCollection;

lookupGcMap(i64 retAddr) {
    i64 end, iter;
    
    iter = CaLang_GcMapRoot + 8;
    end = iter + (i64[CaLang_GcMapRoot] << 3);

    while (iter < end) {
        i64 curr;

        curr = i64[iter];
        if (i64[curr] == retAddr) {
            return curr;
        }
        else {
            iter = iter + 8;
        }
    }
    return 0;
}

pprGcMap(i64 gcMap) {
    i64 i, nPtrs;

    i = 0;
    call "C/vararg" printf(".GcMap @%p {\n", gcMap);
    while (i < 64) {
        call "C/vararg" printf("  i64[%ld] = %p\n", i, i64[gcMap + i]);
        i = i + 8;
    }

    nPtrs = i64[gcMap + 64];
    if (nPtrs) {
        i64 ptrIter;
        ptrIter = 0;
        call "C/vararg" printf("  ptrs=[");
        while (ptrIter < nPtrs) {
            call "C/vararg" printf("%ld, ", i64[gcMap + 72 + (ptrIter << 3)]);
            ptrIter = ptrIter + 1;
        }
        call "C/vararg" printf("]\n");
    }

    call "C/vararg" printf("}\n");
}

#endif  /* GC_CAL */
